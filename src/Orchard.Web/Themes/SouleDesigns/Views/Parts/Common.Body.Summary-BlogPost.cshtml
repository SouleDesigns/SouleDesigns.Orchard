@using Orchard.ContentManagement;

@*doing excerpt generation on the way out for now so we don't stick ourselves with needing to regen excerpts for existing data
  also, doing this here, inline, until we have a pluggable processing model (both in and out)
  also, ...this is ugly *@
@{ 
    var blogPost = Model.ContentItem;
    
    string bodyHtml = Model.Html.ToString();
    var body = new HtmlString(Html.Excerpt(bodyHtml, 500).ToString().Replace(Environment.NewLine, "</p>" + Environment.NewLine + "<p>"));

    var firstIMG = bodyHtml.IndexOf("<img");
    var firstSlashIMG = bodyHtml.IndexOf("/>", firstIMG >= 0 ? firstIMG : 0);

    if (firstIMG >= 0 && firstSlashIMG > firstIMG) {
        bodyHtml = bodyHtml.Substring(firstIMG, firstSlashIMG + 2 - firstIMG);        
        bodyHtml = bodyHtml.Replace("<img", "<img class=\"img-responsive\"");        
    }

    var firstImage = new HtmlString(bodyHtml);


    // Use holder.js if no image found for "No Preview" placeholder
    if (firstIMG < 0 || firstSlashIMG <= firstIMG)
    {
        firstImage = new HtmlString(string.Format("<img src=\"{0}\" />", Url.Content("~/Themes/SouleDesigns/Scripts/") + "holder.js/125x125/text:No Preview"));
    }    
}

<script type="text/javascript">
    $('#blogpost-@blogPost.Id .post-image').html(function () {
        var img = $('@firstImage');
        img.removeAttr('style');
        img.removeAttr('width');
        img.removeAttr('height');        
        return '<a href="@Url.ItemDisplayUrl((IContent)blogPost)">' + img.prop('outerHTML') + '</a>';
    });
</script>

<p>@body</p>
<a href="@Url.ItemDisplayUrl((IContent)blogPost)" class="btn btn-sm btn-primary">Read more</a>