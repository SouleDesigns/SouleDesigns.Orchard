@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{

    /* Global includes for the theme
    ***************************************************************/

    SetMeta("charset", "utf-8");
    SetMeta("robots", "index, follow");
    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    SetMeta("viewport", "width=device-width, initial-scale=1");
    SetMeta("apple-mobile-web-app-capable", "yes");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/
    var containerClass = "container";
    var asideCssClass = ThemeHelper.GetAsideCssClass(asideClass);
    var tripelCssClass = ThemeHelper.GetTripelCssClass(tripelClass);
    var footerQuadCssClass = ThemeHelper.GetFooterQuadCssClass(footerQuadClass);
    var homeUrl = Href("~/");
}

<div id="navbar-wrapper">
    <div class="navbar navbar-default navbar-fixed-top" role="navigation">
        <div id="sd-nav-fill">
            <div id="sd-nav-menu">
                <div class="@containerClass">
                    <div class="navbar-header">
                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                            <span class="sr-only">Toggle navigation</span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                        </button>
                        <a class="navbar-brand" href="@homeUrl"></a>
                    </div>
                    <div id="sd-nav-search" class="pull-right"><div class="btn" data-toggle="button"></div></div>
                    <div class="navbar-collapse collapse pull-right">
                        <div id="sd-nav-searchform">
                            @using (Html.BeginForm("index", "search", new { area = "Orchard.Search" }, FormMethod.Get, new { @class = "search-form" }))
                            {
                                <input placeholder="Search" type="text" id="q" name="q" value="" />
                                <button class="btn" type="submit"></button>
                            }
                        </div>
                        @if (Model.Navigation != null)
                        { @Zone(Model.Navigation)}
                    </div>
                </div>
            </div>	<!-- / end sd nav menu -->
        </div>  <!-- / end sd nav fill -->
    </div>  <!-- / end navbar -->
</div>

@if (Model.Featured != null)
{
    <div class="featured">
        @Zone(Model.Featured)
    </div>
}
<div class="layout-wide">
    @if (Model.BeforeMain != null)
    {
        <div>
            <div class="col-md-12">
                @Zone(Model.BeforeMain)
            </div>
        </div>
    }
    <div>
        @if (Model.AsideFirst != null)
        {
            <aside class="col-md-3">
                <div class="well well-sm">
                    @Zone(Model.AsideFirst)&nbsp;
                </div>
            </aside>
        }
        <div class="@asideCssClass">
            @if (Model.Messages != null)
            {
                @Zone(Model.Messages)
            }
            @if (Model.BeforeContent != null)
            {
                @Zone(Model.BeforeContent)
            }
            @if (Model.Content != null)
            {
                @Zone(Model.Content)
            }
            @if (Model.AfterContent != null)
            {
                @Zone(Model.AfterContent)
            }
        </div>
        @if (Model.AsideSecond != null)
        {
            <aside class="col-md-3">
                <div class="well well-sm">
                    @Zone(Model.AsideSecond)&nbsp;
                </div>
            </aside>
        }
    </div>
    @if (Model.AfterMain != null)
    {
        <div>
            <div class="col-md-12">
                @Zone(Model.AfterMain)
            </div>
        </div>
    }
    @if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
    {

        <div>
            @if (Model.TripelFirst != null)
            {
                <div class="@tripelCssClass">
                    @Zone(Model.TripelFirst)
                </div>
            }
            @if (Model.TripelSecond != null)
            {
                <div class="@tripelCssClass">
                    @Zone(Model.TripelSecond)
                </div>
            }
            @if (Model.TripelThird != null)
            {
                <div class="@tripelCssClass">
                    @Zone(Model.TripelThird)
                </div>
            }
        </div>
    }
</div>
<div class="clearfix"></div>

<div id="footer-wrapper">
    <div class="container footer">
        @if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null)
        {
            <div class="row">
                @if (Model.FooterQuadFirst != null)
                {
                    <div class="col-lg-4">
                        @Zone(Model.FooterQuadFirst)
                    </div>
                }
                @if (Model.FooterQuadSecond != null)
                {
                    <div class="col-lg-4">
                        @Zone(Model.FooterQuadSecond)
                    </div>
                }
                @if (Model.FooterQuadThird != null)
                {
                    <div class="col-lg-4">
                        @Zone(Model.FooterQuadThird)
                    </div>
                }
                @if (Model.FooterQuadFourth != null)
                {
                    <div class="col-lg-4">
                        @Zone(Model.FooterQuadFourth)
                    </div>
                }
            </div>
        }
        <footer>
            <p class="footer-actions pull-right"><a href="javascript:void(0)" id="sd-top-link"><i class="fa fa-chevron-up"></i> Back to top</a></p>
            <p class="footer-actions powered legal">
                <span class="small"><a href="http://www.orchardproject.net/" target="_blank" id="orchard-logo">Powered by Orchard</a> &nbsp;&copy; 2009-@DateTime.Now.Year.ToString() Soule Designs.   All rights reserved.</span>
                @if (WorkContext.CurrentUser != null)
                {
                    var user = WorkContext.CurrentUser.ContentItem;

                    <span class="small"> Welcome, <b> @Html.ItemDisplayText(WorkContext.CurrentUser) </b></span>
                    <a href="@Url.Action("LogOff", "Account", new {Area = "Orchard.Users", ReturnUrl = Context.Request.RawUrl })" rel="nofollow"><i class="fa fa-sign-out fw"></i> Log Out</a>

                    if (AuthorizedFor(Orchard.Security.StandardPermissions.AccessAdminPanel))
                    {
                        <a href="@Url.Action("Index", "Admin", new {Area = "Dashboard"})" rel="nofollow"><i class="fa fa-dashboard fw"></i> Dashboard</a>
                    }
                }
                else
                {
                    <a href="@Url.Action("LogOn", "Account", new {Area = "Orchard.Users", ReturnUrl = (Request.QueryString["ReturnUrl"] ?? Url.Content("~/Admin")) })" rel="nofollow"><i class="fa fa-sign-in"></i> Log In</a>
                }
            </p>
        </footer>
    </div>
</div>    